// üìÅ utils/validations.ts
// Fun√ß√µes de valida√ß√£o para formul√°rios
// Cada fun√ß√£o retorna string com erro ou null se v√°lido

// üìß VALIDA√á√ÉO DE EMAIL
export const validarEmail = (email: string): string | null => {
  if (!email.trim()) {
    return null // Email √© opcional
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  if (!emailRegex.test(email)) {
    return 'Formato de email inv√°lido.'
  }

  if (email.length > 100) {
    return 'Email deve ter no m√°ximo 100 caracteres.'
  }

  return null
}

// üìã VALIDA√á√ÉO DE CPF
export const validarCpf = (cpf: string): string | null => {
  // Remove caracteres n√£o num√©ricos
  const cpfLimpo = cpf.replace(/\D/g, '')

  // Verifica se tem 11 d√≠gitos
  if (cpfLimpo.length !== 11) {
    return 'CPF deve ter 11 d√≠gitos'
  }

  // Verifica se n√£o s√£o todos n√∫meros iguais
  if (/^(\d)\1{10}$/.test(cpfLimpo)) {
    return 'CPF inv√°lido'
  }

  // Algoritmo de valida√ß√£o do CPF
  let soma = 0
  let resto

  // Valida primeiro d√≠gito
  for (let i = 1; i <= 9; i++) {
    soma += parseInt(cpfLimpo.substring(i - 1, i)) * (11 - i)
  }

  resto = (soma * 10) % 11
  if (resto === 10 || resto === 11) resto = 0
  if (resto !== parseInt(cpfLimpo.substring(9, 10))) {
    return 'CPF inv√°lido'
  }

  // Valida segundo d√≠gito
  soma = 0
  for (let i = 1; i <= 10; i++) {
    soma += parseInt(cpfLimpo.substring(i - 1, i)) * (12 - i)
  }

  resto = (soma * 10) % 11
  if (resto === 10 || resto === 11) resto = 0
  if (resto !== parseInt(cpfLimpo.substring(10, 11))) {
    return 'CPF inv√°lido'
  }

  return null // CPF v√°lido
}

// üìû VALIDA√á√ÉO DE TELEFONE
export const validarTelefone = (telefone: string): string | null => {
  // Remove caracteres n√£o num√©ricos
  const telLimpo = telefone.replace(/\D/g, '')

  // Verifica se tem pelo menos 10 d√≠gitos (fixo) ou 11 (celular)
  if (telLimpo.length < 10) {
    return 'Telefone deve ter pelo menos 10 d√≠gitos'
  }

  if (telLimpo.length > 11) {
    return 'Telefone deve ter no m√°ximo 11 d√≠gitos'
  }

  // Verifica se o DDD √© v√°lido (11-99)
  const ddd = parseInt(telLimpo.substring(0, 2))
  if (ddd < 11 || ddd > 99) {
    return 'DDD inv√°lido'
  }

  return null // Telefone v√°lido
}

// üë§ VALIDA√á√ÉO DE NOME COMPLETO
export const validarNomeCompleto = (nome: string): string | null => {
  if (!nome || nome.trim().length === 0) {
    return 'Nome √© obrigat√≥rio'
  }

  if (nome.trim().length < 3) {
    return 'Nome deve ter pelo menos 3 caracteres'
  }

  if (nome.trim().length > 100) {
    return 'Nome deve ter no m√°ximo 100 caracteres'
  }

  // Verifica se tem pelo menos um espa√ßo (nome e sobrenome)
  if (!nome.trim().includes(' ')) {
    return 'Digite nome e sobrenome'
  }

  // Verifica se cont√©m apenas letras, espa√ßos e acentos
  const nomeRegex = /^[a-zA-Z√Ä-√ø\s]+$/
  if (!nomeRegex.test(nome.trim())) {
    return 'Nome deve conter apenas letras'
  }

  return null // Nome v√°lido
}

// üî¢ VALIDA√á√ÉO DE C√ìDIGO SIMPLES VET
export const validarCodigoSimplesVet = (codigo: string): string | null => {
  if (!codigo || codigo.trim().length === 0) {
    return 'C√≥digo √© obrigat√≥rio'
  }

  const codigoNumero = parseInt(codigo)

  if (isNaN(codigoNumero)) {
    return 'C√≥digo deve ser um n√∫mero'
  }

  if (codigoNumero <= 0) {
    return 'C√≥digo deve ser maior que zero'
  }

  if (codigoNumero > 999999999) {
    return 'C√≥digo muito grande'
  }

  return null // C√≥digo v√°lido
}

// üêï VALIDA√á√ÉO DE NOME DO ANIMAL
export const validarNomeAnimal = (nome: string): string | null => {
  if (!nome || nome.trim().length === 0) {
    return 'Nome do animal √© obrigat√≥rio'
  }

  if (nome.trim().length < 2) {
    return 'Nome deve ter pelo menos 2 caracteres'
  }

  if (nome.trim().length > 50) {
    return 'Nome deve ter no m√°ximo 50 caracteres'
  }

  // Permite letras, n√∫meros, espa√ßos e alguns caracteres especiais
  const nomeRegex = /^[a-zA-Z√Ä-√ø0-9\s\-_.]+$/
  if (!nomeRegex.test(nome.trim())) {
    return 'Nome cont√©m caracteres inv√°lidos'
  }

  return null // Nome v√°lido
}

// üéØ VALIDA√á√ÉO DE TIPO DE ANIMAL
export const validarTipoAnimal = (tipo: string): string | null => {
  if (!tipo || tipo.trim().length === 0) {
    return 'Tipo de animal √© obrigat√≥rio'
  }

  return null // Tipo v√°lido (j√° validado pelo select)
}

// üßπ FUN√á√ïES UTILIT√ÅRIAS DE FORMATA√á√ÉO

// Formatar CPF para exibi√ß√£o
export const formatarCpf = (cpf: string): string => {
  const cpfLimpo = cpf.replace(/\D/g, '')
  return cpfLimpo.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4')
}

// Formatar telefone para exibi√ß√£o
export const formatarTelefone = (telefone: string): string => {
  const telLimpo = telefone.replace(/\D/g, '')

  if (telLimpo.length === 11) {
    return telLimpo.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3')
  } else if (telLimpo.length === 10) {
    return telLimpo.replace(/(\d{2})(\d{4})(\d{4})/, '($1) $2-$3')
  }

  return telefone
}

// Limpar formata√ß√£o (manter apenas n√∫meros)
export const limparFormatacao = (valor: string): string => {
  return valor.replace(/\D/g, '')
}
