-- 🔧 Script para resolver conflito com views no PostgreSQL
-- Este script resolve o problema da view vw_atendimentos_completos que está impedindo alterações na tabela servicos_adicionais

-- ==========================================
-- ETAPA 1: Backup da view (opcional)
-- ==========================================

-- Criar backup da definição da view
-- SELECT pg_get_viewdef('banhoetosa.vw_atendimentos_completos', true);

-- ==========================================
-- ETAPA 2: Remover a view temporariamente
-- ==========================================

-- Comentário: Remove a view que está causando conflito
DROP VIEW IF EXISTS banhoetosa.vw_atendimentos_completos CASCADE;

-- ==========================================
-- ETAPA 3: Verificar se a tabela existe e criar se necessário
-- ==========================================

-- Verificar se a tabela servicos_adicionais existe
DO $$
BEGIN
    -- Se a tabela não existir, criar ela
    IF NOT EXISTS (SELECT FROM information_schema.tables
                   WHERE table_schema = 'banhoetosa'
                   AND table_name = 'servicos_adicionais') THEN

        -- Executar o script de criação da tabela
        EXECUTE '
        CREATE TABLE banhoetosa.servicos_adicionais (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            animal_servico_principal_id BIGINT NOT NULL,
            servico_adicional_id BIGINT NOT NULL,
            quantidade_adicional INTEGER NOT NULL DEFAULT 1,
            valor_unitario DECIMAL(10, 2) NOT NULL,
            valor_total DECIMAL(10, 2) NOT NULL,
            status_pagamento VARCHAR(50) NOT NULL DEFAULT ''em_aberto'',
            data_pagamento DATE,
            observacoes TEXT,
            data_adicao TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
            usuario_id BIGINT NOT NULL,

            CONSTRAINT fk_servicos_adicionais_animal_servico
                FOREIGN KEY (animal_servico_principal_id)
                REFERENCES banhoetosa.animal_servico(id),

            CONSTRAINT fk_servicos_adicionais_servico
                FOREIGN KEY (servico_adicional_id)
                REFERENCES banhoetosa.servicos(id),

            CONSTRAINT fk_servicos_adicionais_usuario
                FOREIGN KEY (usuario_id)
                REFERENCES banhoetosa.usuarios(id),

            CONSTRAINT chk_servicos_adicionais_status
                CHECK (status_pagamento IN (''pago'', ''em_aberto'', ''cancelado''))
        )';

        RAISE NOTICE 'Tabela servicos_adicionais criada com sucesso.';
    ELSE
        RAISE NOTICE 'Tabela servicos_adicionais já existe.';
    END IF;
END $$;

-- ==========================================
-- ETAPA 4: Adicionar colunas se necessário
-- ==========================================

-- Adicionar colunas na tabela servicos se não existirem
DO $$
BEGIN
    -- Adicionar coluna pode_ser_adicional
    IF NOT EXISTS (SELECT FROM information_schema.columns
                   WHERE table_schema = 'banhoetosa'
                   AND table_name = 'servicos'
                   AND column_name = 'pode_ser_adicional') THEN
        ALTER TABLE banhoetosa.servicos
        ADD COLUMN pode_ser_adicional BOOLEAN DEFAULT TRUE;

        RAISE NOTICE 'Coluna pode_ser_adicional adicionada à tabela servicos.';
    END IF;

    -- Adicionar coluna categoria
    IF NOT EXISTS (SELECT FROM information_schema.columns
                   WHERE table_schema = 'banhoetosa'
                   AND table_name = 'servicos'
                   AND column_name = 'categoria') THEN
        ALTER TABLE banhoetosa.servicos
        ADD COLUMN categoria VARCHAR(100) DEFAULT 'geral';

        RAISE NOTICE 'Coluna categoria adicionada à tabela servicos.';
    END IF;
END $$;

-- ==========================================
-- ETAPA 5: Recriar a view (se necessário)
-- ==========================================

-- Nota: Você precisará recriar manualmente a view vw_atendimentos_completos
-- se ela for necessária para o funcionamento do sistema.
--
-- Para verificar se existem outras views dependentes:
-- SELECT * FROM information_schema.views WHERE table_schema = 'banhoetosa';
--
-- Para obter a definição de uma view:
-- SELECT pg_get_viewdef('banhoetosa.nome_da_view', true);

-- ==========================================
-- VERIFICAÇÕES FINAIS
-- ==========================================

-- Verificar se as tabelas foram criadas corretamente
SELECT
    schemaname,
    tablename,
    tableowner
FROM pg_tables
WHERE schemaname = 'banhoetosa'
AND tablename IN ('servicos_adicionais', 'servicos', 'animal_servico');

-- Verificar colunas da tabela servicos
SELECT
    column_name,
    data_type,
    character_maximum_length,
    column_default,
    is_nullable
FROM information_schema.columns
WHERE table_schema = 'banhoetosa'
AND table_name = 'servicos'
ORDER BY ordinal_position;

-- Verificar colunas da tabela servicos_adicionais
SELECT
    column_name,
    data_type,
    character_maximum_length,
    column_default,
    is_nullable
FROM information_schema.columns
WHERE table_schema = 'banhoetosa'
AND table_name = 'servicos_adicionais'
ORDER BY ordinal_position;

COMMIT;
